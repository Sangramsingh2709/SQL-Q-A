1.Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

Ans:-SELECT DISTINCT CITY FROM STATION
 WHERE CITY NOT LIKE '%a' 
 AND CITY NOT LIKE '%e'
 AND CITY NOT LIKE '%i'
 AND CITY NOT LIKE '%o' 
 AND CITY NOT LIKE '%u'

2.Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
The STATION table is described as follows:

Ans:-SELECT COUNT(CITY)- COUNT( DISTINCT CITY) FROM  STATION;


3.Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

Ans:-select distinct city from station where (city like 'a%' or city like'e%'
        or city like 'i%' or city like 'o%' or city like 'u%')
        and 
       (city like '%a' or city like'%e'
        or city like '%i' or city like '%o' or city like '%u') ;

4.Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

Ans:-select distinct city from station
where city not like 'a%' 
and city not like 'e%'
and city not like 'i%'
and city not like 'o%'
and city not like 'u%'
or city not like '%a' 
and city not like '%e'
and city not like '%i'
and city not like '%o'
and city not like '%u';

5.Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

Ans:-SELECT NAME FROM STUDENTS
WHERE MARKS > 75
ORDER BY RIGHT(NAME, 3), ID ASC;

6.Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than Any number . Round your answer to  decimal places.

Ans-SELECT ROUND(LONG_W,4) From Station
WHERE LAT_N =
(SELECT MAX(LAT_N) FROM STATION WHERE LAT_N < 137.2345);


7.Consider P1(a,b) and P2(c,d)  to be two points on a 2D plane.

 happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points P1  and P2  and round it to a scale of  decimal places.

Ans-Select round(( (max(lat_n) - min(lat_n)) + (max(long_w) - min(long_w))),4) as distance from station;








